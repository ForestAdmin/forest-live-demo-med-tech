// This model was generated by Forest CLI. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Doctors = sequelize.define('doctors', {
    doctorId: {
      type: DataTypes.INTEGER,
      primaryKey: true,
      defaultValue: Sequelize.literal('nextval(\'doctors_doctor_id_seq\'::regclass)'),
      allowNull: false,
    },
    firstName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    lastName: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    age: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    gender: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    specialty: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    contactInformation: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  }, {
    tableName: 'doctors',
    underscored: true,
    timestamps: false,
    schema: process.env.DATABASE_SCHEMA,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/reference-guide/relationships#adding-relationships.
  Doctors.associate = (models) => {
    Doctors.hasMany(models.appointments, {
      foreignKey: {
        name: 'doctorIdKey',
        field: 'doctor_id',
      },
      sourceKey: 'doctorId',
      as: 'appointments',
    });
    Doctors.hasMany(models.prescriptions, {
      foreignKey: {
        name: 'doctorIdKey',
        field: 'doctor_id',
      },
      sourceKey: 'doctorId',
      as: 'prescriptions',
    });
  };

  return Doctors;
};
